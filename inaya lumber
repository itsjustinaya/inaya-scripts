-- library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("lt2 script -made by inaya7252", "DarkTheme")
-- clipboard system
local function CopyToClipboard(text)
    setclipboard(text)
    print("Copied to clipboard: " .. text)
end
-- notif system
local function CreateNotification(message, iconId)
    local notification = game:GetService("StarterGui"):SetCore("SendNotification", {
        Title = "Notification",
        Text = message,
        Icon = iconId,
        Duration = 2
    })
end
-- Credits Section
local Tab = Window:NewTab("home")
local home = Tab:NewSection("credits:")
-- credit labels
home:NewLabel("autobuy: made by silentben8x")
home:NewLabel("lua teacher: zeen")
home:NewLabel("autobuy gift script: made by inaya7252")
-- copy socaill button
local customPhrase = "https://discord.gg/68J3NmAJQK"
home:NewButton("copy discord", "Copys the script server into your clipboard", function()
    CopyToClipboard(customPhrase)
    local customIconId = "rbxassetid://128737233"
    CreateNotification("Successfully copied inaya's Discord server link to your clipboard!", customIconId)
end)
-- serverhop (thnx apple for leakinng the loadstring xx)
home:NewButton("serverhop", "serverhops you", function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/itsjustinaya/inaya-scripts/main/serverhop"))()
end)
-- player section
local Tab = Window:NewTab("player")
local player = Tab:NewSection("player:")
-- player speed
getgenv().Speed = 16

-- Function to handle walk speed changes
function Walkspeed()
    game.Players.LocalPlayer.Character.Humanoid:GetPropertyChangedSignal("WalkSpeed"):Connect(function()
        game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
    end)
    game.Players.LocalPlayer.Character.Humanoid.WalkSpeed = getgenv().Speed
end

-- Slider for walk speed
player:NewSlider("walkspeed", "change your walkspeed", 500, 16, function(value)
    getgenv().Speed = value
    Walkspeed()
end)
-- jump power
player:NewSlider("jump power", "adjust your characters jump power", 500, 50, function(jump)
    game.Players.LocalPlayer.Character.Humanoid.JumpPower = jump
end)
    local Player = game.Players.LocalPlayer
    local Mouse = Player:GetMouse()
    local UserInputService = game:GetService("UserInputService")
    
    local toggle = false
    
    local function onKeyPress(input)
        if input.KeyCode == Enum.KeyCode.Space and toggle then
            Player.Character:FindFirstChildOfClass("Humanoid"):ChangeState("Jumping")
        end
    end
    
    UserInputService.InputBegan:Connect(onKeyPress)
    
    local Section = {} 
    local function ToggleFunction(state)
        toggle = state
        if toggle then
            print("Toggle On")
        else
            print("Toggle Off")
        end
    end
-- infinity jump
    player:NewToggle("infinity jump", "jump high!", ToggleFunction)
getgenv().NoClipEnabled = false

function NoClip(NoClipVal)
    if not NoClipVal then
        Clipping:Disconnect()
    else
        Clipping = game:GetService("RunService").Stepped:Connect(function()
            for i, v in next, game.Players.LocalPlayer.Character:GetChildren() do
                if v:IsA("Part") or v:IsA("BasePart") then
                    v.CanCollide = false
                end
            end
        end)
    end
end
-- noclip
player:NewToggle("noclip", "toggle on and off noclip", function(enabled)
    getgenv().NoClipEnabled = enabled
    NoClip(enabled)
end)

local Player = game.Players.LocalPlayer
local UserInputService = game:GetService("UserInputService")
local Mouse = Player:GetMouse()
local TeleportEnabled = false
local function Teleport(position)
    Player.Character:SetPrimaryPartCFrame(CFrame.new(position))
end

local Toggle = player:NewToggle("control tp", "activate control tp", function(state)
    TeleportEnabled = state
end)

UserInputService.InputBegan:Connect(function(input)
    if TeleportEnabled and input.UserInputType == Enum.UserInputType.MouseButton1 and UserInputService:IsKeyDown(Enum.KeyCode.LeftControl) then
        Teleport(Mouse.Hit.Position)
    end
end)
-- toggle light (player)
local lightToggle = false

local lightButton = player:NewToggle("toggle light", "activates light around you", function(state)
    lightToggle = state
    Light(lightToggle)
end)

function Light(Val)
    if Val == false then
        local pointLight = game.Players.LocalPlayer.Character.Head:FindFirstChild("PointLight")
        if pointLight then
            pointLight:Destroy()
        end
        return
    end

    local existingLight = game.Players.LocalPlayer.Character.Head:FindFirstChild("PointLight")
    if not existingLight then
        local pointLight = Instance.new("PointLight")
        pointLight.Parent = game.Players.LocalPlayer.Character.Head
        pointLight.Range = 100
        pointLight.Brightness = 1
        pointLight.Shadows = false
    end
end
-- world section
local Tab = Window:NewTab("world")
local world = Tab:NewSection("world config:")
-- allways day/night toggle
local AlwaysDayToggle = false
local AlwaysNightToggle = false

local function UpdateLighting()
    if AlwaysDayToggle then
        if AlwaysNightToggle then return end
        game.Lighting.TimeOfDay = "12:00:00"
        game.Lighting.SunPos.Value = 1

        game:GetService("Lighting").Ambient = Color3.new(1, 1, 1)
        game:GetService("Lighting").ColorShift_Bottom = Color3.new(1, 1, 1)
        game:GetService("Lighting").ColorShift_Top = Color3.new(1, 1, 1)
    end
    if AlwaysNightToggle then
        if AlwaysDayToggle then return end
        game.Lighting.TimeOfDay = "00:00:00"
        game.Lighting.SunPos.Value = -1
    end
end

local function ToggleAlwaysDay(state)
    AlwaysDayToggle = state
    UpdateLighting()
end

local function ToggleAlwaysNight(state)
    AlwaysNightToggle = state
    UpdateLighting()
end

world:NewToggle("allways day", "turns on allways day", ToggleAlwaysDay)
world:NewToggle("allways night", "turns on allways night", ToggleAlwaysNight)

game:GetService("RunService").Heartbeat:Connect(UpdateLighting)
-- lower bridge (for player only)
local isBridgeRaised = false

local function BridgeDown(Bridge)
    for i, v in next, game:GetService("Workspace").Bridge.VerticalLiftBridge.Lift:GetChildren() do
        if not Bridge then
            v.CFrame = v.CFrame + Vector3.new(0, 26, 0)
        else
            v.CFrame = v.CFrame - Vector3.new(0, 26, 0)
        end
    end
end

local ToggleButton = world:NewToggle("lower bridge", "lower the bridge only for yourself (other players wont see this)", function(state)
    isBridgeRaised = state
    BridgeDown(isBridgeRaised)
end)
-- realistic world
world:NewButton("better world graphics", "make the graphics of the world more realistic", function()
    local light = game.Lighting
    light:ClearAllChildren()

    local color = Instance.new("ColorCorrectionEffect", light)
    local bloom = Instance.new("BloomEffect", light)
    local sun = Instance.new("SunRaysEffect", light)
    local blur = Instance.new("BlurEffect", light)

    local config = {
        ColorCorrection = true,
        Sun = true,
        Lighting = true,
        BloomEffect = true,
    }

    color.Enabled = true
    color.Contrast = 0.15
    color.Brightness = 0.1
    color.Saturation = 0.25
    color.TintColor = Color3.fromRGB(255, 222, 211)

    sun.Enabled = true
    sun.Intensity = 0.2
    sun.Spread = 1

    bloom.Enabled = true
    bloom.Intensity = 1
    bloom.Size = 32
    bloom.Threshold = 1

    blur.Enabled = true
    blur.Size = 3

    light.Ambient = Color3.fromRGB(0, 0, 0)
    light.ColorShift_Bottom = Color3.fromRGB(0, 0, 0)
    light.ColorShift_Top = Color3.fromRGB(0, 0, 0)
    light.ExposureCompensation = 0
    light.GlobalShadows = true
    light.OutdoorAmbient = Color3.fromRGB(112, 117, 128)
    light.Outlines = false
end)
-- water section label (world tab)
world:NewLabel("water config:")
-- walk on water
local function WalkOnWater(swater)
    for i, v in next, game:GetService("Workspace").Water:GetChildren() do
        if v.Name == "Water" then
            v.CanCollide = swater
        end
    end
end

local walkOnWaterToggle = world:NewToggle("walk on water", "walk on water", function(swater)
    WalkOnWater(swater)
end)
-- remove water
local RemoveWaterToggle = world:NewToggle("remove water", "removes the water", function(Rwater)
    for _, v in ipairs(game:GetService("Workspace").Water:GetChildren()) do
        if v:IsA("Part") and v.Name == "Water" then
            if not Rwater then
                v.Transparency = 0
            else
                v.Transparency = 1
            end
        end
    end
end)
-- realistic water
world:NewButton("realistic water", "adds realistic water but breaks the other water configs.", function()
    for _, v in pairs(game.Workspace:GetDescendants()) do
        if v:IsA("Part") and v.Name == "SeaSand" then
            v.Size = Vector3.new(2048, 60, 2048)
        end
    end

    for _, v in pairs(game.Workspace:GetDescendants()) do
        if v:IsA("Part") and v.Name == "Water" then
            v.Size = Vector3.new(20480, 6, 20080)
            game.Workspace.Terrain:FillBlock(v.CFrame, v.Size, Enum.Material.Water)
            v:Destroy()
        end
    end
end)
-- slot section
local Tab = Window:NewTab("slot")
local slot = Tab:NewSection("land:")
-- free land
local function FreeLand()
    for i, v in next, game:GetService("Workspace").Properties:GetChildren() do
        if v:FindFirstChild("Owner") and v.Owner.Value == nil then
            game:GetService("ReplicatedStorage").PropertyPurchasing.ClientPurchasedProperty:FireServer(v, v.OriginSquare.Position)
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.OriginSquare.CFrame + Vector3.new(0, 2, 0)
            break
        end
    end
end

slot:NewButton("free land", "claim free land", function()
    FreeLand()
end)
-- max land
function MaxLand()
    for s,d in pairs(workspace.Properties:GetChildren()) do
        if d:FindFirstChild("Owner") and d:FindFirstChild("OriginSquare") and d.Owner.Value == game.Players.LocalPlayer then
            local PlotPos = d.OriginSquare.Position
            for _, offset in ipairs({
                Vector3.new(40, 0, 0),
                Vector3.new(-40, 0, 0),
                Vector3.new(0, 0, 40),
                Vector3.new(0, 0, -40),
                Vector3.new(40, 0, 40),
                Vector3.new(40, 0, -40),
                Vector3.new(-40, 0, 40),
                Vector3.new(-40, 0, -40),
                Vector3.new(80, 0, 0),
                Vector3.new(-80, 0, 0),
                Vector3.new(0, 0, 80),
                Vector3.new(0, 0, -80),
                Vector3.new(80, 0, 80),
                Vector3.new(80, 0, -80),
                Vector3.new(-80, 0, 80),
                Vector3.new(-80, 0, -80),
                Vector3.new(40, 0, 80),
                Vector3.new(-40, 0, 80),
                Vector3.new(80, 0, 40),
                Vector3.new(80, 0, -40),
                Vector3.new(-80, 0, 40),
                Vector3.new(-80, 0, -40),
                Vector3.new(40, 0, -80),
                Vector3.new(-40, 0, -80),
            }) do
                game:GetService("ReplicatedStorage").PropertyPurchasing.ClientExpandedProperty:FireServer(d, CFrame.new(PlotPos + offset))
            end
        end
    end
end

slot:NewButton("max land", "gives you max land", function()
MaxLand()
end)
-- axes config label
slot:NewLabel("axes config:")
-- store axes
local toggleStatus = false

local function StoreAxes()
    Amount = 0
    for _, tool in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if tool:IsA("Tool") and tool.Name ~= "BlueprintTool" then
            tool.Parent = game.Players.LocalPlayer
            Amount = Amount + 1
        end
    end
end

local function RestoreAxes()
    Amount = 0
    for _, tool in pairs(game.Players.LocalPlayer:GetChildren()) do
        if tool:IsA("Tool") and tool.Name ~= "BlueprintTool" then
            tool.Parent = game.Players.LocalPlayer.Backpack
            Amount = Amount + 1
        end
    end
end

slot:NewToggle("store axes", "stores your axes for to get it back you simply turn it off", function(state)
    toggleStatus = state
    if toggleStatus then
        StoreAxes()
    else
        RestoreAxes()
    end
end)

-- wood section
local Tab = Window:NewTab("wood")
local wood = Tab:NewSection("wood:")
-- bring all logs
function BringAllLogs()
    local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    local logs = game:GetService("Workspace").LogModels:GetChildren()

    if #logs == 0 then
        local player = game.Players.LocalPlayer
        local playerGui = player:WaitForChild("PlayerGui")
        local screenGui = Instance.new("ScreenGui")
        screenGui.Parent = playerGui
        local roundGui = Instance.new("Frame")
        roundGui.Size = UDim2.new(0, 200, 0, 100)
        roundGui.Position = UDim2.new(1, -220, 0, 20)
        roundGui.BackgroundColor3 = Color3.new(75, 151, 75)
        roundGui.BorderSizePixel = 0
        roundGui.Parent = screenGui
        
        local notificationLabel = Instance.new("TextLabel")
        notificationLabel.Size = UDim2.new(1, 0, 1, 0)
        notificationLabel.Text = "No logs found!"
        notificationLabel.TextScaled = true
        notificationLabel.TextColor3 = Color3.new(1, 1, 1)
        notificationLabel.Parent = roundGui
        
        local function showNotification(message)
            notificationLabel.Text = message
            roundGui:TweenPosition(UDim2.new(1, -220, 0, 20), "Out", "Quad", 0.5, true)
            wait(3)
            roundGui:TweenPosition(UDim2.new(1, 20, 0, 20), "In", "Quad", 0.5, true)
        end
        
        showNotification("no logs found!")
        return
    end

    for i, v in ipairs(logs) do
        if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v:FindFirstChild("WoodSection").CFrame.p)
            if not v.PrimaryPart then
                v.PrimaryPart = v:FindFirstChild("WoodSection")
            end
            for j = 1, 50 do
                game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                v:SetPrimaryPartCFrame(OldPos)
                task.wait()
            end
        end
        task.wait()
    end

    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
end

wood:NewButton("bring all logs", "brings all the logs that you chopped to you", BringAllLogs)
-- sell logs
function SellAllLogs()
    local OldPos = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame
    local logs = game:GetService("Workspace").LogModels:GetChildren()

    if #logs == 0 then
        print("No logs found!")
        return
    end

    for i, v in ipairs(logs) do
        if v:FindFirstChild("Owner") and v.Owner.Value == game.Players.LocalPlayer then
            game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(v:FindFirstChild("WoodSection").CFrame.p)
            task.wait(0.3)
            if not v.PrimaryPart then
                v.PrimaryPart = v:FindFirstChild("WoodSection")
            end
            spawn(function()
                for i = 1, 50 do
                    game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                    v:SetPrimaryPartCFrame(CFrame.new(314, -0.5, 86.822))
                    task.wait()
                end
            end)
        end
        task.wait()
    end

    task.wait()
    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = OldPos
end

wood:NewButton("sell all logs", "sell all the logs that you chopped", SellAllLogs)

-- label lonecave tree
wood:NewLabel("Lone Cave tree:")
-- view end tree
function ViewEndTree(Val)
    local treeFound = false
    for _, region in pairs(game.Workspace:GetChildren()) do
        if region.Name == "TreeRegion" then
            for _, tree in pairs(region:GetChildren()) do
                if tree:FindFirstChild("Owner") and tostring(tree.Owner.Value) == "nil" then
                    if tree:FindFirstChild("TreeClass") and tostring(tree.TreeClass.Value) == "LoneCave" then
                        treeFound = true
                        if Val then
                            game.Workspace.Camera.CameraSubject = tree:FindFirstChild("WoodSection")
                        else
                            game.Workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
                        end
                    end
                end
            end
        end
    end

    if not treeFound then
        local player = game.Players.LocalPlayer
        local playerGui = player:WaitForChild("PlayerGui")
        local screenGui = Instance.new("ScreenGui")
        screenGui.Parent = playerGui
        local roundGui = Instance.new("Frame")
        roundGui.Size = UDim2.new(0, 200, 0, 100)
        roundGui.Position = UDim2.new(1, -220, 0, 20)
        roundGui.BackgroundColor3 = Color3.new(75, 151, 75)
        roundGui.BorderSizePixel = 0
        roundGui.Parent = screenGui
        
        local notificationLabel = Instance.new("TextLabel")
        notificationLabel.Size = UDim2.new(1, 0, 1, 0)
        notificationLabel.Text = "Hello, this is a notification!"
        notificationLabel.TextScaled = true
        notificationLabel.TextColor3 = Color3.new(1, 1, 1)
        notificationLabel.Parent = roundGui
        
        local function showNotification(message)
            notificationLabel.Text = message
            roundGui:TweenPosition(UDim2.new(1, -220, 0, 20), "Out", "Quad", 0.5, true)
            wait(3)
            roundGui:TweenPosition(UDim2.new(1, 20, 0, 20), "In", "Quad", 0.5, true)
        end
        
        showNotification("the tree isnt there")
    end
end

wood:NewButton("view Lone Cave tree", "shows you the Lone Cave tree, if he isnt there a notification will pop up", function()
    ViewEndTree(not ViewEndTreeStatus)
    ViewEndTreeStatus = not ViewEndTreeStatus
end)
-- teleport section
local Tab = Window:NewTab("teleports")
local teleport = Tab:NewSection("world teleport:")
-- place teleport (player)
local teleportLocations = {
    ["Wood Rus"] = Vector3.new(257, 3, 57),
    ["Land Store"] = Vector3.new(249, 3, -99),
    ["Fancy Furnishings"] = Vector3.new(491, 3, -1709),
    ["Boxed Cars"] = Vector3.new(510, 3, -1470),
    ["Bobs Shack"] = Vector3.new(255, 8, -2542),
    ["Links Logic"] = Vector3.new(4609, 7, -775),
    ["Fine Arts Shop"] = Vector3.new(5211, -166, 720),
    ["Fire Tower"] = Vector3.new(1527, 355, 3263),
    ["Shrine Of Sight"] = Vector3.new(-1339, 226, 707),
    ["Strange Man"] = Vector3.new(1068, 17, 1137),
}

local selectedLocation = nil

local dropdown = teleport:NewDropdown("insert location:", "teleports you to the chosen place", {
    "Wood Rus",
    "Land Store",
    "Fancy Furnishings",
    "Boxed Cars",
    "Bobs Shack",
    "Links Logic",
    "Fine Arts Shop",
    "Fire Tower",
    "Shrine Of Sight",
    "Strange Man",
}, function(currentOption)
    selectedLocation = currentOption

    if selectedLocation then
        local targetPosition = teleportLocations[selectedLocation]

        local success, error = pcall(function()
            game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(CFrame.new(targetPosition))
        end)
        if not success then
            warn("Error teleporting:", error)
        end
    end
end)
-- organize label
teleport:NewLabel("player teleport:")
-- teleport player
local playerList = {}

local function updatePlayerList()
    playerList = {}
    for _, player in pairs(game.Players:GetPlayers()) do
        table.insert(playerList, player.Name)
    end
end

local dropdown = teleport:NewDropdown("select player:", "click on a player to teleport there", playerList, function(currentOption)
    print("Selected player: " .. currentOption)

    local selectedPlayer = game.Players:FindFirstChild(currentOption)
    if selectedPlayer then
        game.Players.LocalPlayer.Character:SetPrimaryPartCFrame(selectedPlayer.Character.HumanoidRootPart.CFrame)
    end
end)

game.Players.PlayerAdded:Connect(function(player)
    updatePlayerList()
    dropdown:Refresh(playerList)
end)

game.Players.PlayerRemoving:Connect(function(player)
    updatePlayerList()
    dropdown:Refresh(playerList)
end)

updatePlayerList()
dropdown:Refresh(playerList)
-- tab autobuy
local Tab = Window:NewTab("autobuy")
-- autobuy section
local autobuy = Tab:NewSection("autobuy:")
-- autobuy items
autobuy:NewDropdown("insert item:", "DropdownInf", {
    "ApplePie",
    "Axe1",
    "Axe2",
    "Axe3",
    "BagOfsand",
    "BasicHatchet",
    "Bed1",
    "Bed2",
    "Button0",
    "Cabinet1",
    "Cabinet1CornerTight",
    "Cabinet1CornerWide",
    "Cabinet1Thin",
    "CanOfCranberry",
    "CanOfWorms",
    "Chair1",
    "ChopSaw",
    "ClockSwitch",
    "ConveyorFunnel",
    "ConveyorSupports",
    "ConveyorSwitch",
    "Cornucopia",
    "CounterTop1",
    "CounterTop1Sink",
    "CounterTop1Thin",
    "Dishwasher",
    "Door1",
    "Door2",
    "Door3",
    "Dynamite",
    "FerryPotterDS",
    "FireworksLauncher",
    "Floor1",
    "Floor1Large",
    "Floor1Small",
    "Floor1Tiny",
    "Floor2",
    "Floor2Large",
    "Floor2Small",
    "Floor2Tiny",
    "FloorLamp1",
    "GateAND",
    "GateNAND",
    "GateNOR",
    "GateNOT",
    "GateOR",
    "GateXNOR",
    "GateXOR",
    "GlassDoor1",
    "GlassPane1",
    "GlassPane2",
    "GlassPane3",
    "GlassPane4",
    "Hatch",
    "IcicleWireAmber",
    "IcicleWireBlue",
    "IcicleWireCandy",
    "IcicleWireHalloween",
    "IcicleWireMagenta",
    "IcicleWireRed",
    "Ladder1",
    "Lamp1",
    "Laser",
    "LaserReciver",
    "Lever0",
    "LightBulb",
    "LogSweeper",
    "NeonWireBlue",
    "NeonWireCyan",
    "NeonWireGreen",
    "NeonWireOrange",
    "NeonWireRed",
    "NeonWireViolet",
    "NeonWireWhite",
    "NeonWireYellow",
    "Painting1",
    "Painting10",
    "Painting11",
    "Painting12",
    "Painting2",
    "Painting3",
    "Painting4",
    "Painting5",
    "Painting6",
    "Painting7",
    "Painting8",
    "Painting9",
    "Pickup1",
    "Plate",
    "Post",
    "PressurePlate",
    "Refridgerator",
    "Rukiryaxe",
    "SRLatch",
    "Sawmill",
    "Sawmill2",
    "Sawmill3",
    "Sawmill4",
    "Sawmill4L",
    "Seat_Armchair",
    "Seat_Couch",
    "Seat_Loveseat",
    "SignalDelay",
    "SignalSustain",
    "SilverAxe",
    "SmallTrailer",
    "Stair1",
    "Stair2",
    "Stove",
    "StraightConveyor",
    "StraightSwitchConveyorLeft",
    "StraightSwitchConveyorRight",
    "Table1",
    "Table2",
    "TightTurnConveyor",
    "TightTurnConveyorSupports",
    "TiltConveyor",
    "Toilet",
    "Trailer2",
    "UtilityTruck",
    "UtilityTruck2",
    "Wall1",
    "WallCorner",
    "Wall1Short",
    "Wall1ShortCorner",
    "Wall1ShortThin",
    "Wall1Thin",
    "Wall2",
    "Wall2Corner",
    "Wall2Short",
    "Wall2ShortCorner",
    "Wall2ShortThin",
    "Wall2Tall",
    "Wall2TallCorner",
    "Wall2TallThin",
    "Wall2Thin",
    "Wall3",
    "Wall3Corner",
    "Wall3Tall",
    "Wall3TallCorner",
    "Wall3TallThin",
    "Wall3Thin",
    "WallLight1",
    "WallLight2",
    "Wedge1",
    "Wedge10",
    "Wedge10_Thin",
    "Wedge1_Thin",
    "Wedge2",
    "Wedge2_Thin",
    "Wedge3",
    "Wedge3_Thin",
    "Wedge4",
    "Wedge4_Thin",
    "Wedge5",
    "Wedge5_Thin",
    "Wedge6",
    "Wedge6_Thin",
    "Wedge7",
    "Wedge7_Thin",
    "Wedge8",
    "Wedge8_Thin",
    "Wedge9",
    "Wedge9_Thin",
    "Wire",
    "WireGreen",
    "WireMagenta",
    "WireRed",
    "WireWhite",
    "WireYellow",
    "WoodChecker",
    "WorkLight" }, function(currentOption)
    getgenv().Item = currentOption
end)
autobuy:NewSlider("amount", "how many items you want to buy", 100, 1, function(slidergifts)
    getgenv().Amount = slidergifts
end)
autobuy:NewButton("autobuy", "autobuy what you selected", function()
    local success, error_message = pcall(function()
loadstring(game:HttpGet("https://raw.githubusercontent.com/itsjustinaya/inaya-scripts/main/autobuy%20code%20-not%20obfuscated.txt"))()
end)    
    if not success then
        warn("Autobuy failed: " .. error_message)
    end
end)
-- troll tab
local Tab = Window:NewTab("troll")
-- trol section
local trol = Tab:NewSection("troll:")
-- clear shop items
function ClearShopItems()
    for i,v in next, game:GetService("Workspace").Stores:GetChildren() do
        if v.Name == "ShopItems" then
            for i,v in next, v:GetChildren() do
                if v:FindFirstChild("Owner") and v.Owner.Value == nil then
                    spawn(function()
                        for i = 1,10 do
                            game.ReplicatedStorage.Interaction.ClientIsDragging:FireServer(v)
                            v.Main.CFrame = v.Main.CFrame + Vector3.new(0,0,25)
                            task.wait()
                        end
                    end)
                end
            end
        end
    end
end
trol:NewButton("clear shop items", "clears the shop items it isnt undoable", function()
ClearShopItems()
end)
-- misc tab
local Tab = Window:NewTab("misc")
-- misc section
local misc = Tab:NewSection("game config:")
-- colorpicker
local colorPickerActive = true

local function ApplyGameMenuTheme(BGColor, TxtColor)
    for _, v in pairs(game:GetService("Players").LocalPlayer.PlayerGui:GetChildren()) do
        if v.Name ~= "Chat" and v.Name ~= "TargetGui" and v.Name ~= "LoadingScreen" and v.Name ~= "Blueprints" then
            for _, desc in pairs(v:GetDescendants()) do
                if not desc:FindFirstChild("UICorner") then
                    Instance.new("UICorner", desc)
                end
                if desc.Name == "DropShadow" then
                    desc:Destroy()
                end
                if desc:IsA("TextButton") or desc:IsA("Frame") or desc:IsA("ScrollingFrame") then
                    desc.BackgroundColor3 = BGColor
                end
                if desc:IsA("TextLabel") or desc:IsA("TextButton") or desc:IsA("TextBox") then
                    desc.TextColor3 = TxtColor
                    desc.BackgroundColor3 = BGColor
                    desc.Font = Enum.Font.GothamMedium
                end
            end
        end
    end
end

local function OnColorPicked(selectedColor)
    if colorPickerActive then
        local success, error = pcall(function()
            ApplyGameMenuTheme(selectedColor, Color3.new(1, 1, 1))
        end)

        if not success then
            warn("Error applying theme:", error)
        end
    end
end

local colorPicker = misc:NewColorPicker("color menu", "change the color of lt2 menu", Color3.fromRGB(0, 0, 0), OnColorPicked)
-- misc label
misc:NewLabel("misc:")
-- load butter
misc:NewButton("butterhub", "loads butterhub", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/Butterisgood/Butter/main/Root2.lua'))("")
end)
-- toggle gui label
misc:NewLabel("toggle gui:")
-- toggle gui button
misc:NewButton("gui toggle button", "loads a toggle button to toggle the gui", function()
    loadstring(game:HttpGet('https://raw.githubusercontent.com/Butter-Hub/mobile/main/toggle%20button'))("")
end)
-- toggle gui bind
misc:NewKeybind("toggle gui bind", "toggle gui keybind (toggles the gui)", Enum.KeyCode.F, function()
	Library:ToggleUI()
end)
misc:NewLabel("game info:")
local playerCountLabel = misc:NewLabel("player count: 0", "shows how many players are in the server you currently in")

local function updatePlayerCount()
    local playerCount = #game.Players:GetPlayers()
    playerCountLabel:UpdateLabel("player count: " .. playerCount)
end

updatePlayerCount()

game.Players.PlayerAdded:Connect(function()
    updatePlayerCount()
end)

game.Players.PlayerRemoving:Connect(function()
    updatePlayerCount()
end)

-- not in gui codes
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- player join/leave detector
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
local function SendNotification(title,text,duration,...)
    game.StarterGui:SetCore("SendNotification", {
      Title = title;
      Text = text;
      Icon = "";
      Duration = duration;
    })
  end

game.Players.ChildAdded:Connect(function(player)
if not pcall (function()
SendNotification("Player JOINED",""..player.Name.." has JOINED the game",5 )
end) then
print ("Error")
end
end)

game.Players.ChildRemoved:Connect(function(player)
if not pcall (function()
SendNotification("Player LEFT",""..player.Name.." has LEFT the game",4.4 )
end) then
print ("Error")
end
end)
    
SendNotification("detector","join/leave detector has been enabled",2)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
-- anti afk (thnx apple u nigga)
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
function AntiAFK()
    game:GetService("Players").LocalPlayer.Idled:Connect(function()
        game:GetService("VirtualInputManager"):SendKeyEvent(true, "w", false, game)
        wait()
        game:GetService("VirtualInputManager"):SendKeyEvent(false, "w", false, game)
    end)
end

AntiAFK()

wait(10)

SendNotification("Anti AFK", "Just letting you know anti AFK is automatically turned on!", 3)

print("Anti AFK is turned on forever.")
